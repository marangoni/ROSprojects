// Generated by gencpp from file jkprobot/Ardubot.msg
// DO NOT EDIT!


#ifndef JKPROBOT_MESSAGE_ARDUBOT_H
#define JKPROBOT_MESSAGE_ARDUBOT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jkprobot
{
template <class ContainerAllocator>
struct Ardubot_
{
  typedef Ardubot_<ContainerAllocator> Type;

  Ardubot_()
    : base_deg(0)
    , waist_deg(0)
    , shoulder_deg(0)  {
    }
  Ardubot_(const ContainerAllocator& _alloc)
    : base_deg(0)
    , waist_deg(0)
    , shoulder_deg(0)  {
  (void)_alloc;
    }



   typedef int32_t _base_deg_type;
  _base_deg_type base_deg;

   typedef int32_t _waist_deg_type;
  _waist_deg_type waist_deg;

   typedef int32_t _shoulder_deg_type;
  _shoulder_deg_type shoulder_deg;





  typedef boost::shared_ptr< ::jkprobot::Ardubot_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jkprobot::Ardubot_<ContainerAllocator> const> ConstPtr;

}; // struct Ardubot_

typedef ::jkprobot::Ardubot_<std::allocator<void> > Ardubot;

typedef boost::shared_ptr< ::jkprobot::Ardubot > ArdubotPtr;
typedef boost::shared_ptr< ::jkprobot::Ardubot const> ArdubotConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jkprobot::Ardubot_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jkprobot::Ardubot_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jkprobot::Ardubot_<ContainerAllocator1> & lhs, const ::jkprobot::Ardubot_<ContainerAllocator2> & rhs)
{
  return lhs.base_deg == rhs.base_deg &&
    lhs.waist_deg == rhs.waist_deg &&
    lhs.shoulder_deg == rhs.shoulder_deg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jkprobot::Ardubot_<ContainerAllocator1> & lhs, const ::jkprobot::Ardubot_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jkprobot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jkprobot::Ardubot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jkprobot::Ardubot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jkprobot::Ardubot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jkprobot::Ardubot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jkprobot::Ardubot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jkprobot::Ardubot_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jkprobot::Ardubot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "25c6d417204f56ff08c29e46dee18838";
  }

  static const char* value(const ::jkprobot::Ardubot_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x25c6d417204f56ffULL;
  static const uint64_t static_value2 = 0x08c29e46dee18838ULL;
};

template<class ContainerAllocator>
struct DataType< ::jkprobot::Ardubot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jkprobot/Ardubot";
  }

  static const char* value(const ::jkprobot::Ardubot_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jkprobot::Ardubot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 base_deg\n"
"int32 waist_deg\n"
"int32 shoulder_deg\n"
;
  }

  static const char* value(const ::jkprobot::Ardubot_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jkprobot::Ardubot_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.base_deg);
      stream.next(m.waist_deg);
      stream.next(m.shoulder_deg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Ardubot_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jkprobot::Ardubot_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jkprobot::Ardubot_<ContainerAllocator>& v)
  {
    s << indent << "base_deg: ";
    Printer<int32_t>::stream(s, indent + "  ", v.base_deg);
    s << indent << "waist_deg: ";
    Printer<int32_t>::stream(s, indent + "  ", v.waist_deg);
    s << indent << "shoulder_deg: ";
    Printer<int32_t>::stream(s, indent + "  ", v.shoulder_deg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JKPROBOT_MESSAGE_ARDUBOT_H
